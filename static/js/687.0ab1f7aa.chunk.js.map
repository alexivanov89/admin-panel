{"version":3,"file":"static/js/687.0ab1f7aa.chunk.js","mappings":"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","sources":["webpack://admin-panel/./src/components/UI/EditableTable/EditableTable.module.scss?c6f2","components/UI/EditableTable/EditableTable.jsx","webpack://admin-panel/./src/components/UI/Table/Table.module.scss?71d0","components/UI/Table/Table.jsx","webpack://admin-panel/./src/components/ListEntities/ListEntities.module.scss?97d1","components/ListEntities/ListEntities.jsx","components/UI/Modal/Modal.jsx","webpack://admin-panel/./src/containers/ListCategories/ListCategories.module.scss?ccfa","containers/ListCategories/ListCategories.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"table\":\"EditableTable_table__66N+3\",\"editableRow\":\"EditableTable_editableRow__XinJa\",\"ant-form-item-explain\":\"EditableTable_ant-form-item-explain__0ntxL\",\"select\":\"EditableTable_select__jmscw\"};","import { Table as AntdTable, Input, InputNumber, Popconfirm, Form, Typography, Select } from 'antd';\nimport { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useSelector } from 'react-redux';\nimport { DropdownIcon } from '../../../assets/icon';\nimport { setIsError, setStatusCode } from '../../../store/slices/errorSlice';\nimport styles from './EditableTable.module.scss';\n\nconst EditableCell = ({\n  editing,\n  dataIndex,\n  title,\n  inputType,\n  record,\n  index,\n  children,\n  ...restProps\n}) => {\n  const {\n    rateType: { rateTypes },\n    city: { cities },\n  } = useSelector(({ table }) => table);\n  const optionsRateType = rateTypes;\n  const optionsCity = cities;\n\n  const getInputNode = (type) => {\n    switch (type) {\n      case 'number':\n        return <InputNumber />;\n      case 'selectRateTypeId':\n        return (\n          <Select\n            showSearch\n            placeholder=\"Тип тарифа\"\n            optionFilterProp=\"children\"\n            filterSort={(optionA, optionB) =>\n              optionA.children.toLowerCase().localeCompare(optionB.children.toLowerCase())\n            }\n            suffixIcon={<DropdownIcon />}\n            className={styles.select}\n            optionLabelProp=\"label\"\n            allowClear\n          >\n            {optionsRateType?.length > 0 &&\n              optionsRateType.map((option) => (\n                <Select.Option value={option?.id} label={option?.name} key={option?.id}>\n                  {option?.name}\n                </Select.Option>\n              ))}\n          </Select>\n        );\n      case 'selectCityId':\n        return (\n          <Select\n            showSearch\n            placeholder=\"город\"\n            optionFilterProp=\"children\"\n            filterSort={(optionA, optionB) =>\n              optionA.children.toLowerCase().localeCompare(optionB.children.toLowerCase())\n            }\n            suffixIcon={<DropdownIcon />}\n            className={styles.select}\n            optionLabelProp=\"label\"\n            allowClear\n          >\n            {optionsCity?.length > 0 &&\n              optionsCity.map((option) => (\n                <Select.Option value={option?.id} label={option?.name} key={option?.id}>\n                  {option?.name}\n                </Select.Option>\n              ))}\n          </Select>\n        );\n      default:\n        return <Input />;\n    }\n  };\n\n  return (\n    <td {...restProps}>\n      {editing ? (\n        <Form.Item\n          name={dataIndex}\n          style={{\n            margin: 0,\n            padding: 0,\n          }}\n          rules={[\n            {\n              required: true,\n              message: `Введите ${title}!`,\n            },\n          ]}\n        >\n          {getInputNode(inputType)}\n        </Form.Item>\n      ) : (\n        children\n      )}\n    </td>\n  );\n};\n\nconst EditableTable = ({ onSave, onDelete, dataSource, columns, ...restProps }) => {\n  const [form] = Form.useForm();\n  const [editingKey, setEditingKey] = useState('');\n  const {\n    rateType: { rateTypes },\n    city: { cities },\n  } = useSelector(({ table }) => table);\n  const dispatch = useDispatch();\n\n  const isEditing = (record) => record.key === editingKey;\n\n  const edit = (record) => {\n    form.setFieldsValue({\n      name: '',\n      ...record,\n    });\n    setEditingKey(record.key);\n  };\n\n  const cancel = () => {\n    setEditingKey('');\n  };\n\n  const save = async (key) => {\n    try {\n      const row = await form.validateFields();\n      if (Object.keys(row).includes('rateTypeId')) {\n        const prepareRow = {\n          price: form.getFieldValue('price'),\n          rateTypeId: rateTypes.find((item) => item.id === form.getFieldValue('rateTypeId')),\n        };\n\n        await onSave(key, prepareRow);\n        setEditingKey('');\n      } else if (Object.keys(row).includes('cityId')) {\n        const prepareRow = {\n          name: form.getFieldValue('name'),\n          address: form.getFieldValue('address'),\n          cityId: cities.find((item) => item.id === form.getFieldValue('cityId')),\n        };\n\n        await onSave(key, prepareRow);\n        setEditingKey('');\n      } else {\n        await onSave(key, row);\n        setEditingKey('');\n      }\n    } catch (error) {\n      dispatch(setIsError(true));\n      dispatch(setStatusCode(error.response.status));\n      throw new Error(error);\n    }\n  };\n\n  const handleDelete = async (key) => {\n    await onDelete(key);\n  };\n\n  const columnsEdit = [\n    ...columns,\n    {\n      title: 'Редактировать',\n      dataIndex: 'operation1',\n      width: '150px',\n      render: (_, record) => {\n        const editable = isEditing(record);\n        return editable ? (\n          <span>\n            <Typography.Link\n              onClick={() => save(record.key)}\n              style={{\n                marginRight: 8,\n                color: '#818ea3',\n              }}\n            >\n              Сохранить\n            </Typography.Link>\n            <Popconfirm\n              title=\"Уверены, что хотите Отменить?\"\n              onConfirm={cancel}\n              cancelText=\"Отмена\"\n            >\n              <a>Отменить</a>\n            </Popconfirm>\n          </span>\n        ) : (\n          <Typography.Link\n            disabled={editingKey !== ''}\n            onClick={() => edit(record)}\n            style={{\n              color: '#818ea3',\n            }}\n          >\n            Редактировать\n          </Typography.Link>\n        );\n      },\n    },\n    {\n      title: 'Удалить',\n      dataIndex: 'operation2',\n      render: (_, record) => (\n        <Popconfirm\n          title=\"Уверены, что хотите Удалить?\"\n          onConfirm={() => handleDelete(record.key)}\n          cancelText=\"Отмена\"\n        >\n          <a>Удалить</a>\n        </Popconfirm>\n      ),\n    },\n  ];\n\n  const getInputType = (index) => {\n    switch (index) {\n      case 'rateTypeId':\n        return 'selectRateTypeId';\n      case 'cityId':\n        return 'selectCityId';\n      case 'price':\n        return 'number';\n      default:\n        return 'text';\n    }\n  };\n\n  const mergedColumns = columnsEdit.map((col) => {\n    if (!col.editable) {\n      return col;\n    }\n\n    return {\n      ...col,\n      onCell: (record) => ({\n        record,\n        inputType: getInputType(col.dataIndex),\n        dataIndex: col.dataIndex,\n        title: col.title,\n        editing: isEditing(record),\n      }),\n    };\n  });\n\n  return (\n    <Form form={form} component={false}>\n      <AntdTable\n        className={styles.table}\n        components={{\n          body: {\n            cell: EditableCell,\n          },\n        }}\n        dataSource={dataSource}\n        columns={mergedColumns}\n        rowClassName={styles.editableRow}\n        {...restProps}\n      />\n    </Form>\n  );\n};\n\nexport default EditableTable;\n","// extracted by mini-css-extract-plugin\nexport default {\"table\":\"Table_table__y43+-\"};","import { Table as AntdTable } from 'antd';\r\nimport styles from './Table.module.scss';\r\n\r\nconst Table = (props) => {\r\n  return <AntdTable className={styles.table} {...props} />;\r\n};\r\n\r\nexport default Table;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"title\":\"ListEntities_title__KL5RP\",\"card\":\"ListEntities_card__iz-Y6\",\"filterBtn\":\"ListEntities_filterBtn__tlSJs\",\"resetBtn\":\"ListEntities_resetBtn__qHB8e\"};","import { Card, Col, Form, Row, Space, Typography } from 'antd';\nimport { EditableTable } from '../UI/EditableTable';\nimport { Table } from '../UI/Table';\nimport styles from './ListEntities.module.scss';\n\nconst ListEntities = (props) => {\n  const { Title } = Typography;\n  const { title, form, tableProps, isEditable = false } = props;\n  const { onChange, fields, filters, buttons } = form;\n\n  return (\n    <>\n      <Title className={styles.title}>{title}</Title>\n      <Card\n        title={\n          <Row>\n            <Form\n              name=\"filters\"\n              layout=\"inline\"\n              style={{ width: '100%' }}\n              fields={fields}\n              onFieldsChange={(_, allFields) => {\n                onChange(allFields);\n              }}\n              requiredMark=\"optional\"\n            >\n              <Col xs={12} sm={14}>\n                <Space size={[15, 15]} wrap style={{ width: '100%' }}>\n                  {filters}\n                </Space>\n              </Col>\n              <Col xs={12} sm={10} style={{ display: 'flex', justifyContent: 'flex-end' }}>\n                <Space size={[15, 15]} wrap>\n                  {buttons}\n                </Space>\n              </Col>\n            </Form>\n          </Row>\n        }\n        bordered={false}\n        className={styles.card}\n        bodyStyle={{ padding: '1px 0px 0px' }}\n      >\n        {isEditable ? <EditableTable {...tableProps} /> : <Table {...tableProps} />}\n      </Card>\n    </>\n  );\n};\n\nexport default ListEntities;\n","import React, { useState } from 'react';\nimport { Modal as AntdModal, Button } from 'antd';\n\nconst Modal = (props) => {\n  const { children, isModalVisible, title, handleOk, handleCancel } = props;\n\n  return (\n    <AntdModal\n      cancelText=\"Отмена\"\n      title={title}\n      visible={isModalVisible}\n      onOk={handleOk}\n      onCancel={handleCancel}\n    >\n      {children}\n    </AntdModal>\n  );\n};\n\nexport default Modal;\n","// extracted by mini-css-extract-plugin\nexport default {\"addBtn\":\"ListCategories_addBtn__pwxqb\"};","import { useEffect, useState } from 'react';\nimport { Button, Form, Input } from 'antd';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { ListEntities } from '../../components/ListEntities';\nimport { Modal } from '../../components/UI/Modal';\nimport { NextIcon, PrevIcon } from '../../assets/icon';\nimport { fetchCategoryAsync } from '../../store/slices/tableSlice';\nimport { tableService } from '../../services/tableService';\nimport styles from './ListCategories.module.scss';\n\nconst ListCategories = () => {\n  const dispatch = useDispatch();\n  const { category } = useSelector(({ table }) => table);\n  const { categories, loading, count, fields } = category;\n  const [page, setPage] = useState(1);\n  const [limit, setLimit] = useState(5);\n  const [form] = Form.useForm();\n  const [isModalVisible, setIsModalVisible] = useState(false);\n\n  const showModal = () => {\n    setIsModalVisible(true);\n  };\n\n  const handleOk = () => {\n    form\n      .validateFields()\n      .then((values) => {\n        form.resetFields();\n        tableService.postCategory(values);\n      })\n      .then(() => {\n        dispatch(fetchCategoryAsync());\n        setIsModalVisible(false);\n      })\n      .catch((info) => {});\n  };\n\n  const handleCancel = () => {\n    setIsModalVisible(false);\n  };\n\n  useEffect(() => {\n    dispatch(fetchCategoryAsync());\n  }, []);\n\n  const dataSource = categories.map((item) => ({ ...item, key: item.id }));\n\n  const columns = fields.map((field) => {\n    switch (field) {\n      case 'name':\n        return {\n          title: 'Название',\n          dataIndex: field,\n          key: field,\n          editable: true,\n          width: '150px',\n          render: (field) => (field ? <>{field}</> : null),\n        };\n\n      case 'description':\n        return {\n          title: 'Описание',\n          dataIndex: field,\n          key: field,\n          editable: true,\n          width: '250px',\n          render: (field) => (field ? <>{field}</> : null),\n        };\n\n      default:\n        return {\n          title: field,\n          dataIndex: field,\n          key: field,\n          render: (field) => (field ? <>{field}</> : null),\n        };\n    }\n  });\n\n  const onChange = (page) => {\n    setPage(page);\n  };\n\n  const itemRender = (current, type, originalElement) => {\n    if (type === 'prev') {\n      return <Button icon={<PrevIcon />} />;\n    }\n    if (type === 'next') {\n      return <Button icon={<NextIcon />} />;\n    }\n    return originalElement;\n  };\n\n  const buttons = (\n    <Form.Item style={{ margin: 0 }}>\n      <Button className={styles.addBtn} onClick={showModal}>\n        Создать\n      </Button>\n    </Form.Item>\n  );\n\n  const onSave = async (id, body) => {\n    await tableService.putCategoryById(id, body);\n    dispatch(fetchCategoryAsync());\n  };\n\n  const onDelete = async (id) => {\n    await tableService.deleteCategoryById(id);\n    dispatch(fetchCategoryAsync());\n  };\n\n  return (\n    <>\n      <ListEntities\n        title=\"Список категорий\"\n        form={{\n          fields: null,\n          onChange: null,\n          filters: null,\n          buttons: buttons,\n        }}\n        tableProps={{\n          pagination: {\n            position: ['bottomCenter'],\n            current: page,\n            pageSize: limit,\n            onChange: onChange,\n            itemRender: itemRender,\n            showSizeChanger: false,\n          },\n          showHeader: true,\n          columns: columns,\n          dataSource: dataSource,\n          loading: loading,\n          scroll: { x: 350 },\n          onSave: onSave,\n          onDelete: onDelete,\n        }}\n        isEditable={true}\n      />\n      <Modal\n        title=\"Создать категорию\"\n        isModalVisible={isModalVisible}\n        handleOk={handleOk}\n        handleCancel={handleCancel}\n      >\n        <Form\n          form={form}\n          layout=\"vertical\"\n          name=\"formCreateEntitie\"\n          initialValues={{\n            name: null,\n            description: null,\n          }}\n        >\n          <Form.Item\n            name=\"name\"\n            label=\"Название\"\n            rules={[\n              {\n                required: true,\n                message: 'Пожалуйста, введите название!',\n              },\n            ]}\n          >\n            <Input placeholder=\"Введите название\" />\n          </Form.Item>\n          <Form.Item\n            name=\"description\"\n            label=\"Описание\"\n            rules={[\n              {\n                required: true,\n                message: 'Пожалуйста, введите описание!',\n              },\n            ]}\n          >\n            <Input placeholder=\"Введите описание\" />\n          </Form.Item>\n        </Form>\n      </Modal>\n    </>\n  );\n};\n\nexport default ListCategories;\n"],"names":["EditableCell","editing","dataIndex","title","inputType","children","record","index","restProps","useSelector","table","rateTypes","rateType","cities","city","optionsRateType","optionsCity","name","style","margin","padding","rules","required","message","type","showSearch","placeholder","optionFilterProp","filterSort","optionA","optionB","toLowerCase","localeCompare","suffixIcon","className","styles","optionLabelProp","allowClear","length","map","option","value","id","label","getInputNode","onSave","onDelete","dataSource","columns","Form","form","useState","editingKey","setEditingKey","dispatch","useDispatch","isEditing","key","cancel","save","validateFields","row","Object","keys","includes","prepareRow","price","getFieldValue","rateTypeId","find","item","address","cityId","setIsError","setStatusCode","response","status","Error","handleDelete","columnsEdit","width","render","_","onClick","marginRight","color","onConfirm","cancelText","disabled","setFieldsValue","edit","getInputType","mergedColumns","col","editable","onCell","component","components","body","cell","rowClassName","props","Title","Typography","tableProps","isEditable","onChange","fields","filters","buttons","layout","onFieldsChange","allFields","requiredMark","xs","sm","size","wrap","display","justifyContent","bordered","bodyStyle","isModalVisible","handleOk","handleCancel","visible","onOk","onCancel","category","categories","loading","count","page","setPage","limit","setIsModalVisible","useEffect","fetchCategoryAsync","field","tableService","ListEntities","pagination","position","current","pageSize","itemRender","originalElement","icon","Ne","showSizeChanger","showHeader","scroll","x","Modal","then","values","resetFields","catch","info","initialValues","description"],"sourceRoot":""}