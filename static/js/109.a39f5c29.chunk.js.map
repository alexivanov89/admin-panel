{"version":3,"file":"static/js/109.a39f5c29.chunk.js","mappings":"2WACA,EAAwB,6BAAxB,EAAmE,mCAAnE,EAAoL,8B,kICO9KA,EAAe,SAAC,GASf,IARLC,EAQI,EARJA,QACAC,EAOI,EAPJA,UACAC,EAMI,EANJA,MACAC,EAKI,EALJA,UAGAC,GAEI,EAJJC,OAII,EAHJC,MAGI,EAFJF,UACGG,GACC,YACJ,GAGIC,EAAAA,EAAAA,KAAY,qBAAGC,SAFLC,EADd,EACEC,SAAYD,UACJE,EAFV,EAEEC,KAAQD,OAEJE,EAAkBJ,EAClBK,EAAcH,EAuDpB,OACE,iCAAQL,GAAR,aACGP,GACC,SAAC,SAAD,CACEgB,KAAMf,EACNgB,MAAO,CACLC,OAAQ,EACRC,QAAS,GAEXC,MAAO,CACL,CACEC,UAAU,EACVC,QAAQ,8CAAD,OAAapB,EAAb,OATb,SAxDe,SAACqB,GACpB,OAAQA,GACN,IAAK,SACH,OAAO,SAAC,IAAD,IACT,IAAK,mBACH,OACE,SAAC,IAAD,CACEC,YAAU,EACVC,YAAY,0DACZC,iBAAiB,WACjBC,WAAY,SAACC,EAASC,GAAV,OACVD,EAAQxB,SAAS0B,cAAcC,cAAcF,EAAQzB,SAAS0B,gBAEhEE,YAAY,SAAC,IAAD,IACZC,UAAWC,EACXC,gBAAgB,QAChBC,YAAU,EAVZ,UAYkB,OAAftB,QAAe,IAAfA,OAAA,EAAAA,EAAiBuB,QAAS,GACzBvB,EAAgBwB,KAAI,SAACC,GAAD,OAClB,SAAC,WAAD,CAAeC,MAAK,OAAED,QAAF,IAAEA,OAAF,EAAEA,EAAQE,GAAIC,MAAK,OAAEH,QAAF,IAAEA,OAAF,EAAEA,EAAQvB,KAAjD,gBACGuB,QADH,IACGA,OADH,EACGA,EAAQvB,MADX,OAA4DuB,QAA5D,IAA4DA,OAA5D,EAA4DA,EAAQE,SAM9E,IAAK,eACH,OACE,SAAC,IAAD,CACEjB,YAAU,EACVC,YAAY,iCACZC,iBAAiB,WACjBC,WAAY,SAACC,EAASC,GAAV,OACVD,EAAQxB,SAAS0B,cAAcC,cAAcF,EAAQzB,SAAS0B,gBAEhEE,YAAY,SAAC,IAAD,IACZC,UAAWC,EACXC,gBAAgB,QAChBC,YAAU,EAVZ,UAYc,OAAXrB,QAAW,IAAXA,OAAA,EAAAA,EAAasB,QAAS,GACrBtB,EAAYuB,KAAI,SAACC,GAAD,OACd,SAAC,WAAD,CAAeC,MAAK,OAAED,QAAF,IAAEA,OAAF,EAAEA,EAAQE,GAAIC,MAAK,OAAEH,QAAF,IAAEA,OAAF,EAAEA,EAAQvB,KAAjD,gBACGuB,QADH,IACGA,OADH,EACGA,EAAQvB,MADX,OAA4DuB,QAA5D,IAA4DA,OAA5D,EAA4DA,EAAQE,SAM9E,QACE,OAAO,SAAC,IAAD,KAoBJE,CAAaxC,KAGhBC,MAuKR,EAjKsB,SAAC,GAA6D,IAA3DwC,EAA0D,EAA1DA,OAAQC,EAAkD,EAAlDA,SAAUC,EAAwC,EAAxCA,WAAYC,EAA4B,EAA5BA,QAAYxC,GAAgB,YACjF,EAAeyC,EAAAA,EAAAA,UAARC,GAAP,eACA,GAAoCC,EAAAA,EAAAA,UAAS,IAA7C,eAAOC,EAAP,KAAmBC,EAAnB,KACA,GAGI5C,EAAAA,EAAAA,KAAY,qBAAGC,SAFLC,EADd,EACEC,SAAYD,UACJE,EAFV,EAEEC,KAAQD,OAEJyC,GAAWC,EAAAA,EAAAA,MAEXC,EAAY,SAAClD,GAAD,OAAYA,EAAOmD,MAAQL,GAUvCM,EAAS,WACbL,EAAc,KAGVM,EAAI,mCAAG,WAAOF,GAAP,oGAESP,EAAKU,iBAFd,UAEHC,EAFG,QAGLC,OAAOC,KAAKF,GAAKG,SAAS,cAHrB,wBAIDC,EAAa,CACjBC,MAAOhB,EAAKiB,cAAc,SAC1BC,WAAYzD,EAAU0D,MAAK,SAACC,GAAD,OAAUA,EAAK5B,KAAOQ,EAAKiB,cAAc,kBAN/D,SASDtB,EAAOY,EAAKQ,GATX,OAUPZ,EAAc,IAVP,4BAWES,OAAOC,KAAKF,GAAKG,SAAS,UAX5B,wBAYDC,EAAa,CACjBhD,KAAMiC,EAAKiB,cAAc,QACzBI,QAASrB,EAAKiB,cAAc,WAC5BK,OAAQ3D,EAAOwD,MAAK,SAACC,GAAD,OAAUA,EAAK5B,KAAOQ,EAAKiB,cAAc,cAfxD,UAkBDtB,EAAOY,EAAKQ,GAlBX,QAmBPZ,EAAc,IAnBP,yCAqBDR,EAAOY,EAAKI,GArBX,QAsBPR,EAAc,IAtBP,gEAyBTC,GAASmB,EAAAA,EAAAA,KAAW,IACpBnB,GAASoB,EAAAA,EAAAA,IAAc,KAAMC,SAASC,SAChC,IAAIC,MAAJ,MA3BG,0DAAH,sDA+BJC,EAAY,mCAAG,WAAOrB,GAAP,iFACbX,EAASW,GADI,2CAAH,sDAIZsB,EAAW,kBACZ/B,GADY,CAEf,CACE7C,MAAO,iFACPD,UAAW,aACX8E,MAAO,QACPC,OAAQ,SAACC,EAAG5E,GAEV,OADiBkD,EAAUlD,IAEzB,6BACE,SAAC,SAAD,CACE6E,QAAS,kBAAMxB,EAAKrD,EAAOmD,MAC3BvC,MAAO,CACLkE,YAAa,EACbC,MAAO,WAJX,qEASA,SAAC,IAAD,CACElF,MAAM,wJACNmF,UAAW5B,EACX6B,WAAW,uCAHb,UAKE,kFAIJ,SAAC,SAAD,CACEC,SAAyB,KAAfpC,EACV+B,QAAS,kBA7EN,SAAC7E,GACZ4C,EAAKuC,gBAAL,QACExE,KAAM,IACHX,IAEL+C,EAAc/C,EAAOmD,KAwEEiC,CAAKpF,IACpBY,MAAO,CACLmE,MAAO,WAJX,8FAYN,CACElF,MAAO,6CACPD,UAAW,aACX+E,OAAQ,SAACC,EAAG5E,GAAJ,OACN,SAAC,IAAD,CACEH,MAAM,kJACNmF,UAAW,kBAAMR,EAAaxE,EAAOmD,MACrC8B,WAAW,uCAHb,UAKE,4EAMFI,EAAe,SAACpF,GACpB,OAAQA,GACN,IAAK,aACH,MAAO,mBACT,IAAK,SACH,MAAO,eACT,IAAK,QACH,MAAO,SACT,QACE,MAAO,SAIPqF,EAAgBb,EAAYxC,KAAI,SAACsD,GACrC,OAAKA,EAAIC,UAIF,kBACFD,GADL,IAEEE,OAAQ,SAACzF,GAAD,MAAa,CACnBA,OAAAA,EACAF,UAAWuF,EAAaE,EAAI3F,WAC5BA,UAAW2F,EAAI3F,UACfC,MAAO0F,EAAI1F,MACXF,QAASuD,EAAUlD,OAVduF,KAeX,OACE,SAAC,IAAD,CAAM3C,KAAMA,EAAM8C,WAAW,EAA7B,UACE,SAAC,KAAD,QACE9D,UAAWC,EACX8D,WAAY,CACVC,KAAM,CACJC,KAAMnG,IAGV+C,WAAYA,EACZC,QAAS4C,EACTQ,aAAcjE,GACV3B,OCjQZ,EAAwB,qBCMxB,EAJc,SAAC6F,GACb,OAAO,SAAC,KAAD,QAAWnE,UAAWC,GAAkBkE,KCHjD,EAAwB,4BAAxB,EAA2D,2BCgD3D,EA5CqB,SAACA,GACpB,IAAQC,EAAUC,EAAAA,EAAAA,MACVpG,EAAgDkG,EAAhDlG,MAAO+C,EAAyCmD,EAAzCnD,KAAMsD,EAAmCH,EAAnCG,WAArB,EAAwDH,EAAvBI,WAAAA,OAAjC,SACQC,EAAuCxD,EAAvCwD,SAAUC,EAA6BzD,EAA7ByD,OAAQC,EAAqB1D,EAArB0D,QAASC,EAAY3D,EAAZ2D,QAEnC,OACE,iCACE,SAACP,EAAD,CAAOpE,UAAWC,EAAlB,SAAiChC,KACjC,SAAC,IAAD,CACEA,OACE,SAAC,IAAD,WACE,UAAC,IAAD,CACEc,KAAK,UACL6F,OAAO,SACP5F,MAAO,CAAE8D,MAAO,QAChB2B,OAAQA,EACRI,eAAgB,SAAC7B,EAAG8B,GAClBN,EAASM,IAEXC,aAAa,WARf,WAUE,SAAC,IAAD,CAAKC,GAAI,GAAIC,GAAI,GAAjB,UACE,SAAC,IAAD,CAAOC,KAAM,CAAC,GAAI,IAAKC,MAAI,EAACnG,MAAO,CAAE8D,MAAO,QAA5C,SACG4B,OAGL,SAAC,IAAD,CAAKM,GAAI,GAAIC,GAAI,GAAIjG,MAAO,CAAEoG,QAAS,OAAQC,eAAgB,YAA/D,UACE,SAAC,IAAD,CAAOH,KAAM,CAAC,GAAI,IAAKC,MAAI,EAA3B,SACGR,WAMXW,UAAU,EACVtF,UAAWC,EACXsF,UAAW,CAAErG,QAAS,eA5BxB,SA8BGqF,GAAa,SAAC,GAAD,UAAmBD,KAAiB,SAAC,GAAD,UAAWA,W,oFCxBrE,EAhBc,SAACH,GACb,IAAQhG,EAA4DgG,EAA5DhG,SAAUqH,EAAkDrB,EAAlDqB,eAAgBvH,EAAkCkG,EAAlClG,MAAOwH,EAA2BtB,EAA3BsB,SAAUC,EAAiBvB,EAAjBuB,aAEnD,OACE,SAAC,IAAD,CACErC,WAAW,uCACXpF,MAAOA,EACP0H,QAASH,EACTI,KAAMH,EACNI,SAAUH,EALZ,SAOGvH,M,0NCbP,EAAyB,8B,SCwLzB,EA/KsB,WACpB,IAAMiD,GAAWC,EAAAA,EAAAA,MACT3C,GAAaH,EAAAA,EAAAA,KAAY,qBAAGC,SAA5BE,SACAD,EAA+BC,EAA/BD,UAAWqH,EAAoBpH,EAApBoH,QAASrB,EAAW/F,EAAX+F,OAC5B,GAAwBxD,EAAAA,EAAAA,UAAS,GAAjC,eAAO8E,EAAP,KAAaC,EAAb,KACA,GAA0B/E,EAAAA,EAAAA,UAAS,GAAnC,eAAOgF,EAAP,KACA,GADA,KACelF,EAAAA,EAAAA,WAARC,GAAP,eACA,GAA4CC,EAAAA,EAAAA,WAAS,GAArD,eAAOuE,EAAP,KAAuBU,EAAvB,MAwBAC,EAAAA,EAAAA,YAAU,WACR/E,GAASgF,EAAAA,EAAAA,SACR,IAEH,IAAMvF,EAAapC,EAAU4B,KAAI,SAAC+B,GAAD,eAAC,UAAeA,GAAhB,IAAsBb,IAAKa,EAAK5B,QAE3DM,EAAU2D,EAAOpE,KAAI,SAACgG,GAC1B,OAAQA,GACN,IAAK,OACH,MAAO,CACLpI,MAAO,mDACPD,UAAWqI,EACX9E,IAAK8E,EACLzC,UAAU,EACVd,MAAO,QACPC,OAAQ,SAACsD,GAAD,OAAYA,GAAQ,8BAAGA,IAAY,OAG/C,IAAK,OACH,MAAO,CACLpI,MAAO,oGACPD,UAAWqI,EACX9E,IAAK8E,EACLzC,UAAU,EACVd,MAAO,QACPC,OAAQ,SAACsD,GAAD,OAAYA,GAAQ,8BAAGA,IAAY,OAG/C,QACE,MAAO,CACLpI,MAAOoI,EACPrI,UAAWqI,EACX9E,IAAK8E,EACLtD,OAAQ,SAACsD,GAAD,OAAYA,GAAQ,8BAAGA,IAAY,WAmB7C1B,GACJ,SAAC,SAAD,CAAW3F,MAAO,CAAEC,OAAQ,GAA5B,UACE,SAAC,IAAD,CAAQe,UAAWC,EAAegD,QA5EpB,WAChBiD,GAAkB,IA2EhB,0DAMEvF,EAAM,mCAAG,WAAOH,EAAIwD,GAAX,iFACPsC,EAAAA,EAAAA,gBAA6B9F,EAAIwD,GAD1B,OAEb5C,GAASgF,EAAAA,EAAAA,OAFI,2CAAH,wDAKNxF,EAAQ,mCAAG,WAAOJ,GAAP,iFACT8F,EAAAA,EAAAA,mBAAgC9F,GADvB,OAEfY,GAASgF,EAAAA,EAAAA,OAFM,2CAAH,sDAKd,OACE,iCACE,SAACG,EAAA,EAAD,CACEtI,MAAM,2GACN+C,KAAM,CACJyD,OAAQ,KACRD,SAAU,KACVE,QAAS,KACTC,QAASA,GAEXL,WAAY,CACVkC,WAAY,CACVC,SAAU,CAAC,gBACXC,QAASX,EACTY,SAAUV,EACVzB,SA/CO,SAACuB,GAChBC,EAAQD,IA+CAa,WA5CS,SAACF,EAASpH,EAAMuH,GACjC,MAAa,SAATvH,GACK,SAAC,IAAD,CAAQwH,MAAM,SAAC,KAAD,MAEV,SAATxH,GACK,SAAC,IAAD,CAAQwH,MAAM,SAAC,EAAAC,GAAD,MAEhBF,GAsCCG,iBAAiB,GAEnBC,YAAY,EACZnG,QAASA,EACTD,WAAYA,EACZiF,QAASA,EACToB,OAAQ,CAAEC,EAAG,KACbxG,OAAQA,EACRC,SAAUA,GAEZ2D,YAAY,KAEd,SAAC6C,EAAA,EAAD,CACEnJ,MAAM,qGACNuH,eAAgBA,EAChBC,SAxHW,WACfzE,EACGU,iBACA2F,MAAK,SAACC,GACLtG,EAAKuG,cACLjB,EAAAA,EAAAA,aAA0BgB,MAE3BD,MAAK,WACJjG,GAASgF,EAAAA,EAAAA,OACTF,GAAkB,MAEnBsB,OAAM,gBA8GL9B,aA3Ge,WACnBQ,GAAkB,IAsGhB,UAME,UAAC,IAAD,CACElF,KAAMA,EACN4D,OAAO,WACP7F,KAAK,oBACL0I,cAAe,CACb1I,KAAM,KACN2I,YAAa,MANjB,WASE,SAAC,SAAD,CACE3I,KAAK,OACL0B,MAAM,mDACNtB,MAAO,CACL,CACEC,UAAU,EACVC,QAAS,+JANf,UAUE,SAAC,IAAD,CAAOG,YAAY,mGAErB,SAAC,SAAD,CACET,KAAK,OACL0B,MAAM,sEACNtB,MAAO,CACL,CACEC,UAAU,EACVC,QAAS,kLANf,UAUE,SAAC,IAAD,CAAOG,YAAY","sources":["webpack://admin-panel/./src/components/UI/EditableTable/EditableTable.module.scss?c6f2","components/UI/EditableTable/EditableTable.jsx","webpack://admin-panel/./src/components/UI/Table/Table.module.scss?71d0","components/UI/Table/Table.jsx","webpack://admin-panel/./src/components/ListEntities/ListEntities.module.scss?97d1","components/ListEntities/ListEntities.jsx","components/UI/Modal/Modal.jsx","webpack://admin-panel/./src/containers/ListRateTypes/ListRateTypes.module.scss?be13","containers/ListRateTypes/ListRateTypes.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"table\":\"EditableTable_table__66N+3\",\"editableRow\":\"EditableTable_editableRow__XinJa\",\"ant-form-item-explain\":\"EditableTable_ant-form-item-explain__0ntxL\",\"select\":\"EditableTable_select__jmscw\"};","import { Table as AntdTable, Input, InputNumber, Popconfirm, Form, Typography, Select } from 'antd';\r\nimport { useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { useSelector } from 'react-redux';\r\nimport { DropdownIcon } from '../../../assets/icon';\r\nimport { setIsError, setStatusCode } from '../../../store/slices/errorSlice';\r\nimport styles from './EditableTable.module.scss';\r\n\r\nconst EditableCell = ({\r\n  editing,\r\n  dataIndex,\r\n  title,\r\n  inputType,\r\n  record,\r\n  index,\r\n  children,\r\n  ...restProps\r\n}) => {\r\n  const {\r\n    rateType: { rateTypes },\r\n    city: { cities },\r\n  } = useSelector(({ table }) => table);\r\n  const optionsRateType = rateTypes;\r\n  const optionsCity = cities;\r\n\r\n  const getInputNode = (type) => {\r\n    switch (type) {\r\n      case 'number':\r\n        return <InputNumber />;\r\n      case 'selectRateTypeId':\r\n        return (\r\n          <Select\r\n            showSearch\r\n            placeholder=\"Тип тарифа\"\r\n            optionFilterProp=\"children\"\r\n            filterSort={(optionA, optionB) =>\r\n              optionA.children.toLowerCase().localeCompare(optionB.children.toLowerCase())\r\n            }\r\n            suffixIcon={<DropdownIcon />}\r\n            className={styles.select}\r\n            optionLabelProp=\"label\"\r\n            allowClear\r\n          >\r\n            {optionsRateType?.length > 0 &&\r\n              optionsRateType.map((option) => (\r\n                <Select.Option value={option?.id} label={option?.name} key={option?.id}>\r\n                  {option?.name}\r\n                </Select.Option>\r\n              ))}\r\n          </Select>\r\n        );\r\n      case 'selectCityId':\r\n        return (\r\n          <Select\r\n            showSearch\r\n            placeholder=\"город\"\r\n            optionFilterProp=\"children\"\r\n            filterSort={(optionA, optionB) =>\r\n              optionA.children.toLowerCase().localeCompare(optionB.children.toLowerCase())\r\n            }\r\n            suffixIcon={<DropdownIcon />}\r\n            className={styles.select}\r\n            optionLabelProp=\"label\"\r\n            allowClear\r\n          >\r\n            {optionsCity?.length > 0 &&\r\n              optionsCity.map((option) => (\r\n                <Select.Option value={option?.id} label={option?.name} key={option?.id}>\r\n                  {option?.name}\r\n                </Select.Option>\r\n              ))}\r\n          </Select>\r\n        );\r\n      default:\r\n        return <Input />;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <td {...restProps}>\r\n      {editing ? (\r\n        <Form.Item\r\n          name={dataIndex}\r\n          style={{\r\n            margin: 0,\r\n            padding: 0,\r\n          }}\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: `Введите ${title}!`,\r\n            },\r\n          ]}\r\n        >\r\n          {getInputNode(inputType)}\r\n        </Form.Item>\r\n      ) : (\r\n        children\r\n      )}\r\n    </td>\r\n  );\r\n};\r\n\r\nconst EditableTable = ({ onSave, onDelete, dataSource, columns, ...restProps }) => {\r\n  const [form] = Form.useForm();\r\n  const [editingKey, setEditingKey] = useState('');\r\n  const {\r\n    rateType: { rateTypes },\r\n    city: { cities },\r\n  } = useSelector(({ table }) => table);\r\n  const dispatch = useDispatch();\r\n\r\n  const isEditing = (record) => record.key === editingKey;\r\n\r\n  const edit = (record) => {\r\n    form.setFieldsValue({\r\n      name: '',\r\n      ...record,\r\n    });\r\n    setEditingKey(record.key);\r\n  };\r\n\r\n  const cancel = () => {\r\n    setEditingKey('');\r\n  };\r\n\r\n  const save = async (key) => {\r\n    try {\r\n      const row = await form.validateFields();\r\n      if (Object.keys(row).includes('rateTypeId')) {\r\n        const prepareRow = {\r\n          price: form.getFieldValue('price'),\r\n          rateTypeId: rateTypes.find((item) => item.id === form.getFieldValue('rateTypeId')),\r\n        };\r\n\r\n        await onSave(key, prepareRow);\r\n        setEditingKey('');\r\n      } else if (Object.keys(row).includes('cityId')) {\r\n        const prepareRow = {\r\n          name: form.getFieldValue('name'),\r\n          address: form.getFieldValue('address'),\r\n          cityId: cities.find((item) => item.id === form.getFieldValue('cityId')),\r\n        };\r\n\r\n        await onSave(key, prepareRow);\r\n        setEditingKey('');\r\n      } else {\r\n        await onSave(key, row);\r\n        setEditingKey('');\r\n      }\r\n    } catch (error) {\r\n      dispatch(setIsError(true));\r\n      dispatch(setStatusCode(error.response.status));\r\n      throw new Error(error);\r\n    }\r\n  };\r\n\r\n  const handleDelete = async (key) => {\r\n    await onDelete(key);\r\n  };\r\n\r\n  const columnsEdit = [\r\n    ...columns,\r\n    {\r\n      title: 'Редактировать',\r\n      dataIndex: 'operation1',\r\n      width: '150px',\r\n      render: (_, record) => {\r\n        const editable = isEditing(record);\r\n        return editable ? (\r\n          <span>\r\n            <Typography.Link\r\n              onClick={() => save(record.key)}\r\n              style={{\r\n                marginRight: 8,\r\n                color: '#818ea3',\r\n              }}\r\n            >\r\n              Сохранить\r\n            </Typography.Link>\r\n            <Popconfirm\r\n              title=\"Уверены, что хотите Отменить?\"\r\n              onConfirm={cancel}\r\n              cancelText=\"Отмена\"\r\n            >\r\n              <a>Отменить</a>\r\n            </Popconfirm>\r\n          </span>\r\n        ) : (\r\n          <Typography.Link\r\n            disabled={editingKey !== ''}\r\n            onClick={() => edit(record)}\r\n            style={{\r\n              color: '#818ea3',\r\n            }}\r\n          >\r\n            Редактировать\r\n          </Typography.Link>\r\n        );\r\n      },\r\n    },\r\n    {\r\n      title: 'Удалить',\r\n      dataIndex: 'operation2',\r\n      render: (_, record) => (\r\n        <Popconfirm\r\n          title=\"Уверены, что хотите Удалить?\"\r\n          onConfirm={() => handleDelete(record.key)}\r\n          cancelText=\"Отмена\"\r\n        >\r\n          <a>Удалить</a>\r\n        </Popconfirm>\r\n      ),\r\n    },\r\n  ];\r\n\r\n  const getInputType = (index) => {\r\n    switch (index) {\r\n      case 'rateTypeId':\r\n        return 'selectRateTypeId';\r\n      case 'cityId':\r\n        return 'selectCityId';\r\n      case 'price':\r\n        return 'number';\r\n      default:\r\n        return 'text';\r\n    }\r\n  };\r\n\r\n  const mergedColumns = columnsEdit.map((col) => {\r\n    if (!col.editable) {\r\n      return col;\r\n    }\r\n\r\n    return {\r\n      ...col,\r\n      onCell: (record) => ({\r\n        record,\r\n        inputType: getInputType(col.dataIndex),\r\n        dataIndex: col.dataIndex,\r\n        title: col.title,\r\n        editing: isEditing(record),\r\n      }),\r\n    };\r\n  });\r\n\r\n  return (\r\n    <Form form={form} component={false}>\r\n      <AntdTable\r\n        className={styles.table}\r\n        components={{\r\n          body: {\r\n            cell: EditableCell,\r\n          },\r\n        }}\r\n        dataSource={dataSource}\r\n        columns={mergedColumns}\r\n        rowClassName={styles.editableRow}\r\n        {...restProps}\r\n      />\r\n    </Form>\r\n  );\r\n};\r\n\r\nexport default EditableTable;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"table\":\"Table_table__y43+-\"};","import { Table as AntdTable } from 'antd';\r\nimport styles from './Table.module.scss';\r\n\r\nconst Table = (props) => {\r\n  return <AntdTable className={styles.table} {...props} />;\r\n};\r\n\r\nexport default Table;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"title\":\"ListEntities_title__KL5RP\",\"card\":\"ListEntities_card__iz-Y6\",\"filterBtn\":\"ListEntities_filterBtn__tlSJs\",\"resetBtn\":\"ListEntities_resetBtn__qHB8e\"};","import { Card, Col, Form, Row, Space, Typography } from 'antd';\r\nimport { EditableTable } from '../UI/EditableTable';\r\nimport { Table } from '../UI/Table';\r\nimport styles from './ListEntities.module.scss';\r\n\r\nconst ListEntities = (props) => {\r\n  const { Title } = Typography;\r\n  const { title, form, tableProps, isEditable = false } = props;\r\n  const { onChange, fields, filters, buttons } = form;\r\n\r\n  return (\r\n    <>\r\n      <Title className={styles.title}>{title}</Title>\r\n      <Card\r\n        title={\r\n          <Row>\r\n            <Form\r\n              name=\"filters\"\r\n              layout=\"inline\"\r\n              style={{ width: '100%' }}\r\n              fields={fields}\r\n              onFieldsChange={(_, allFields) => {\r\n                onChange(allFields);\r\n              }}\r\n              requiredMark=\"optional\"\r\n            >\r\n              <Col xs={12} sm={14}>\r\n                <Space size={[15, 15]} wrap style={{ width: '100%' }}>\r\n                  {filters}\r\n                </Space>\r\n              </Col>\r\n              <Col xs={12} sm={10} style={{ display: 'flex', justifyContent: 'flex-end' }}>\r\n                <Space size={[15, 15]} wrap>\r\n                  {buttons}\r\n                </Space>\r\n              </Col>\r\n            </Form>\r\n          </Row>\r\n        }\r\n        bordered={false}\r\n        className={styles.card}\r\n        bodyStyle={{ padding: '1px 0px 0px' }}\r\n      >\r\n        {isEditable ? <EditableTable {...tableProps} /> : <Table {...tableProps} />}\r\n      </Card>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ListEntities;\r\n","import React, { useState } from 'react';\r\nimport { Modal as AntdModal, Button } from 'antd';\r\n\r\nconst Modal = (props) => {\r\n  const { children, isModalVisible, title, handleOk, handleCancel } = props;\r\n\r\n  return (\r\n    <AntdModal\r\n      cancelText=\"Отмена\"\r\n      title={title}\r\n      visible={isModalVisible}\r\n      onOk={handleOk}\r\n      onCancel={handleCancel}\r\n    >\r\n      {children}\r\n    </AntdModal>\r\n  );\r\n};\r\n\r\nexport default Modal;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"addBtn\":\"ListRateTypes_addBtn__wVsZj\"};","import { useEffect, useState } from 'react';\r\nimport { Button, Form, Input } from 'antd';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { ListEntities } from '../../components/ListEntities';\r\nimport { Modal } from '../../components/UI/Modal';\r\nimport { NextIcon, PrevIcon } from '../../assets/icon';\r\nimport { fetchRateTypeAsync } from '../../store/slices/tableSlice';\r\nimport { tableService } from '../../services/tableService';\r\nimport styles from './ListRateTypes.module.scss';\r\n\r\nconst ListRateTypes = () => {\r\n  const dispatch = useDispatch();\r\n  const { rateType } = useSelector(({ table }) => table);\r\n  const { rateTypes, loading, fields } = rateType;\r\n  const [page, setPage] = useState(1);\r\n  const [limit, setLimit] = useState(5);\r\n  const [form] = Form.useForm();\r\n  const [isModalVisible, setIsModalVisible] = useState(false);\r\n\r\n  const showModal = () => {\r\n    setIsModalVisible(true);\r\n  };\r\n\r\n  const handleOk = () => {\r\n    form\r\n      .validateFields()\r\n      .then((values) => {\r\n        form.resetFields();\r\n        tableService.postRateType(values);\r\n      })\r\n      .then(() => {\r\n        dispatch(fetchRateTypeAsync());\r\n        setIsModalVisible(false);\r\n      })\r\n      .catch(() => {});\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    setIsModalVisible(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchRateTypeAsync());\r\n  }, []);\r\n\r\n  const dataSource = rateTypes.map((item) => ({ ...item, key: item.id }));\r\n\r\n  const columns = fields.map((field) => {\r\n    switch (field) {\r\n      case 'name':\r\n        return {\r\n          title: 'Название',\r\n          dataIndex: field,\r\n          key: field,\r\n          editable: true,\r\n          width: '150px',\r\n          render: (field) => (field ? <>{field}</> : null),\r\n        };\r\n\r\n      case 'unit':\r\n        return {\r\n          title: 'Единица измерения',\r\n          dataIndex: field,\r\n          key: field,\r\n          editable: true,\r\n          width: '150px',\r\n          render: (field) => (field ? <>{field}</> : null),\r\n        };\r\n\r\n      default:\r\n        return {\r\n          title: field,\r\n          dataIndex: field,\r\n          key: field,\r\n          render: (field) => (field ? <>{field}</> : null),\r\n        };\r\n    }\r\n  });\r\n\r\n  const onChange = (page) => {\r\n    setPage(page);\r\n  };\r\n\r\n  const itemRender = (current, type, originalElement) => {\r\n    if (type === 'prev') {\r\n      return <Button icon={<PrevIcon />} />;\r\n    }\r\n    if (type === 'next') {\r\n      return <Button icon={<NextIcon />} />;\r\n    }\r\n    return originalElement;\r\n  };\r\n\r\n  const buttons = (\r\n    <Form.Item style={{ margin: 0 }}>\r\n      <Button className={styles.addBtn} onClick={showModal}>\r\n        Создать\r\n      </Button>\r\n    </Form.Item>\r\n  );\r\n\r\n  const onSave = async (id, body) => {\r\n    await tableService.putRateTypeById(id, body);\r\n    dispatch(fetchRateTypeAsync());\r\n  };\r\n\r\n  const onDelete = async (id) => {\r\n    await tableService.deleteRateTypeById(id);\r\n    dispatch(fetchRateTypeAsync());\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <ListEntities\r\n        title=\"Список типов тарифа\"\r\n        form={{\r\n          fields: null,\r\n          onChange: null,\r\n          filters: null,\r\n          buttons: buttons,\r\n        }}\r\n        tableProps={{\r\n          pagination: {\r\n            position: ['bottomCenter'],\r\n            current: page,\r\n            pageSize: limit,\r\n            onChange: onChange,\r\n            itemRender: itemRender,\r\n            showSizeChanger: false,\r\n          },\r\n          showHeader: true,\r\n          columns: columns,\r\n          dataSource: dataSource,\r\n          loading: loading,\r\n          scroll: { x: 350 },\r\n          onSave: onSave,\r\n          onDelete: onDelete,\r\n        }}\r\n        isEditable={true}\r\n      />\r\n      <Modal\r\n        title=\"Создать тип тарифа\"\r\n        isModalVisible={isModalVisible}\r\n        handleOk={handleOk}\r\n        handleCancel={handleCancel}\r\n      >\r\n        <Form\r\n          form={form}\r\n          layout=\"vertical\"\r\n          name=\"formCreateEntitie\"\r\n          initialValues={{\r\n            name: null,\r\n            description: null,\r\n          }}\r\n        >\r\n          <Form.Item\r\n            name=\"name\"\r\n            label=\"Название\"\r\n            rules={[\r\n              {\r\n                required: true,\r\n                message: 'Пожалуйста, введите название!',\r\n              },\r\n            ]}\r\n          >\r\n            <Input placeholder=\"Введите название\" />\r\n          </Form.Item>\r\n          <Form.Item\r\n            name=\"unit\"\r\n            label=\"Ед.измерения\"\r\n            rules={[\r\n              {\r\n                required: true,\r\n                message: 'Пожалуйста, введите ед.измерения!',\r\n              },\r\n            ]}\r\n          >\r\n            <Input placeholder=\"Введите ед.измерения\" />\r\n          </Form.Item>\r\n        </Form>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ListRateTypes;\r\n"],"names":["EditableCell","editing","dataIndex","title","inputType","children","record","index","restProps","useSelector","table","rateTypes","rateType","cities","city","optionsRateType","optionsCity","name","style","margin","padding","rules","required","message","type","showSearch","placeholder","optionFilterProp","filterSort","optionA","optionB","toLowerCase","localeCompare","suffixIcon","className","styles","optionLabelProp","allowClear","length","map","option","value","id","label","getInputNode","onSave","onDelete","dataSource","columns","Form","form","useState","editingKey","setEditingKey","dispatch","useDispatch","isEditing","key","cancel","save","validateFields","row","Object","keys","includes","prepareRow","price","getFieldValue","rateTypeId","find","item","address","cityId","setIsError","setStatusCode","response","status","Error","handleDelete","columnsEdit","width","render","_","onClick","marginRight","color","onConfirm","cancelText","disabled","setFieldsValue","edit","getInputType","mergedColumns","col","editable","onCell","component","components","body","cell","rowClassName","props","Title","Typography","tableProps","isEditable","onChange","fields","filters","buttons","layout","onFieldsChange","allFields","requiredMark","xs","sm","size","wrap","display","justifyContent","bordered","bodyStyle","isModalVisible","handleOk","handleCancel","visible","onOk","onCancel","loading","page","setPage","limit","setIsModalVisible","useEffect","fetchRateTypeAsync","field","tableService","ListEntities","pagination","position","current","pageSize","itemRender","originalElement","icon","Ne","showSizeChanger","showHeader","scroll","x","Modal","then","values","resetFields","catch","initialValues","description"],"sourceRoot":""}